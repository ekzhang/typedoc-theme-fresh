import {
  Application,
  JSX,
  DefaultTheme,
  DefaultThemeRenderContext,
  PageEvent,
  Reflection,
  Renderer,
  i18n,
  PageHeading,
} from "typedoc";

// From src/lib/output/themes/lib.tsx
function classNames(
  names: Record<string, boolean | null | undefined>,
  extraCss?: string
) {
  const css = Object.keys(names)
    .filter((key) => names[key])
    .concat(extraCss || "")
    .join(" ")
    .trim()
    .replace(/\s+/g, " ");
  return css.length ? css : undefined;
}

// From src/lib/output/themes/lib.tsx
function wbr(str: string): (string | JSX.Element)[] {
  const parts = str.split(
    /(?<=[^A-Z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|(?<=[_-])(?=[^_-])/
  );
  return parts.flatMap((p) => [p, <wbr />]).slice(0, -1);
}

// From src/lib/output/themes/default/partials/navigation.tsx
function buildSectionNavigation(
  context: DefaultThemeRenderContext,
  headings: PageHeading[]
) {
  const levels: JSX.Element[][] = [[]];

  function finalizeLevel(finishedHandlingHeadings: boolean) {
    const level = levels.pop()!;
    if (levels[levels.length - 1].length === 0 && finishedHandlingHeadings) {
      levels[levels.length - 1] = level;
      return;
    }

    const built = (
      <ul>
        {level.map((l) => (
          <li>{l}</li>
        ))}
      </ul>
    );
    levels[levels.length - 1].push(built);
  }

  function getInferredHeadingLevel(heading: PageHeading) {
    if (heading.level) {
      // Regular heading
      return heading.level + 2;
    }
    if (heading.kind) {
      // Reflection
      return 2;
    }

    // Group/category
    return 1;
  }

  for (const heading of headings) {
    const inferredLevel = getInferredHeadingLevel(heading);
    while (inferredLevel < levels.length) {
      finalizeLevel(false);
    }
    while (inferredLevel > levels.length) {
      // Lower level than before
      levels.push([]);
    }

    levels[levels.length - 1].push(
      <a href={heading.link} class={classNames({}, heading.classes)}>
        {heading.kind && context.icons[heading.kind]()}
        <span>{wbr(heading.text)}</span>
      </a>
    );
  }

  while (levels.length > 1) {
    finalizeLevel(true);
  }

  levels.unshift([]);
  finalizeLevel(true);
  return levels[0];
}

/**
 * Custom theme render context for the Fresh theme.
 * Extends the default TypeDoc render context with custom styling and layout.
 */
class FreshRenderContext extends DefaultThemeRenderContext {
  constructor(theme: Fresh, page: PageEvent<Reflection>) {
    super(theme.router, theme, page, theme.application.options);
  }

  // Header: "tsd-page-title" class, breadcrumb and <h1>
  // override header = (props: PageEvent<Reflection>) => <>HEADER</>;

  // Remove footer, just the "Generated by TypeDoc" text
  override footer = () => <></>;

  // Override page navigation (right sidebar) to be a bit cleaner.
  override pageNavigation = (props: PageEvent<Reflection>): JSX.Element => {
    if (!props.pageSections.some((sect) => sect.headings.length)) {
      return <></>;
    }

    const sections: JSX.Children = [];

    for (const section of props.pageSections) {
      if (section.title) {
        sections.push(
          <details open class="tsd-accordion tsd-page-navigation-section">
            <summary
              class="tsd-accordion-summary"
              data-key={`section-${section.title}`}
            >
              {this.icons.chevronDown()}
              {section.title}
            </summary>
            <div>{buildSectionNavigation(this, section.headings)}</div>
          </details>
        );
      } else {
        sections.push(buildSectionNavigation(this, section.headings));
      }
    }

    return <div class="tsd-page-navigation">{sections}</div>;
  };

  // Remove settings sidebar. "Member Visibility" filters are not needed, and
  // OS/light/dark theme toggle will be moved to header.
  override settings = () => <></>;

  override toolbar = (props: PageEvent<Reflection>): JSX.Element => {
    return (
      <header class="tsd-page-toolbar">
        <div class="tsd-toolbar-contents container">
          <a
            href={
              this.options.getValue("titleLink") ||
              this.relativeURL("index.html")
            }
            class="title"
          >
            {props.project.name}
          </a>

          <div id="tsd-toolbar-links">
            {Object.entries(this.options.getValue("navigationLinks")).map(
              ([label, url]) => (
                <a href={url}>{label}</a>
              )
            )}
          </div>

          <div class="tsd-theme-toggle" style="position: relative">
            {/* <label class="settings-label" for="tsd-theme">
              {i18n.theme_theme()}
            </label> */}
            <div style="position: absolute; left: 8px; top: 4px; pointer-events: none">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="lucide lucide-sun-moon-icon lucide-sun-moon"
              >
                <path d="M12 2v2" />
                <path d="M14.837 16.385a6 6 0 1 1-7.223-7.222c.624-.147.97.66.715 1.248a4 4 0 0 0 5.26 5.259c.589-.255 1.396.09 1.248.715" />
                <path d="M16 12a4 4 0 0 0-4-4" />
                <path d="m19 5-1.256 1.256" />
                <path d="M20 12h2" />
              </svg>
            </div>
            <select id="tsd-theme">
              <option value="os">{/* {i18n.theme_os()} theme */}System</option>
              <option value="light">{i18n.theme_light()}</option>
              <option value="dark">{i18n.theme_dark()}</option>
            </select>
          </div>

          <button
            id="tsd-search-trigger"
            class="tsd-widget"
            aria-label={i18n.theme_search()}
            style="
              border: 1px solid var(--color-background-active);
              border-radius: 4px;
            "
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-search-icon lucide-search"
              style="margin-bottom: 1px; margin-left: 4px; margin-right: 8px;"
            >
              <path d="m21 21-4.34-4.34" />
              <circle cx="11" cy="11" r="8" />
            </svg>
            <span style="margin-right: 12ch;">Searchâ€¦</span>
          </button>
          <dialog id="tsd-search" aria-label={i18n.theme_search()}>
            <input
              role="combobox"
              id="tsd-search-input"
              aria-controls="tsd-search-results"
              aria-autocomplete="list"
              aria-expanded="true"
              spellcheck={false}
              autocapitalize="off"
              autocomplete="off"
              placeholder={i18n.theme_search_placeholder()}
              maxLength={100}
            />

            <ul role="listbox" id="tsd-search-results"></ul>
            <div id="tsd-search-status" aria-live="polite" aria-atomic="true">
              <div>{i18n.theme_preparing_search_index()}</div>
            </div>
          </dialog>
          {/* <a
            href="#"
            class="tsd-widget menu"
            id="tsd-toolbar-menu-trigger"
            data-toggle="menu"
            aria-label={i18n.theme_menu()}
          >
            {this.icons.menu()}
          </a> */}
        </div>
      </header>
    );
  };
}

// TODO: Maybe move this into a separate CSS file and set up a non-tsc bundler.
const styles = `
/* typedoc-theme-fresh */

/* @view-transition {
  navigation: auto;
} */

:root {
  --light-color-background: #fafafe;
  --light-color-background-active: #e6e8ea;
  --light-color-text: #222222;

  --dark-color-background: #18181a;
  --dark-color-background-active: #2d2d2a;
  --dark-color-text: #dfdfd6;

  --dim-header-height: 2.5rem;
  --dim-footer-height: 0px;
}

body {
  display: flex;
  flex-direction: column;
  height: 100dvh;

  & > .container.container-main {
    flex-grow: 1;
    margin: 0;
    overflow: auto;
    /* scroll-behavior: smooth; */

    --dim-container-main-margin-y: 0px;
  }
}

@media (prefers-color-scheme: light) {
  ::selection {
    background-color: #11111a20;
  }
}

@media (prefers-color-scheme: dark) {
  ::selection {
    background-color: #bbbbff48;
  }
}

:root[data-theme="light"] {
  ::selection {
    background-color: #11111a20;
  }
}

:root[data-theme="dark"] {
  ::selection {
    background-color: #bbbbff48;
  }
}

.tsd-page-toolbar {
  background-color: transparent;
  border-bottom: none;

  .title {
    font-weight: 500;
    font-size: 18px;
    &:hover {
      color: var(--color-contrast-text);
      text-decoration: none;
    }
  }

  .tsd-theme-toggle {
    display: flex;
    position: relative;
    margin-right: 12px;
    color: var(--color-text-aside);
    
    select {
      cursor: pointer;
      border: 1px solid var(--color-background-active);
      border-radius: 4px;
      padding: 6px 8px;
      padding-left: 32px;  /* Space for the icon */
      font-size: 14px;
      background: transparent;
      transition: background-color 200ms;
      color: var(--color-text-aside);
      
      /* for Firefox and Chrome: these are inconsistent */
      -moz-appearance: none;
      -webkit-appearance: none;
      
      &:hover {
        background-color: var(--color-background-active);
      }
    }
  }
}

.col-content {
  padding-block: 24px;
}

.site-menu {
  top: 0px;
  padding-block: 24px;
  box-sizing: border-box;
}

.page-menu {
  top: 0px;
  padding-block: 48px 24px;
  box-sizing: border-box;
}

.tsd-navigation,
.tsd-page-navigation {
  > * {
    margin-bottom: 8px;
  }

  li:not(:last-of-type) {
    margin-bottom: 2px;
  }

  a {
    border-radius: 4px;
    padding-inline: 6px;
  }
  a:hover {
    text-decoration: none;
    background-color: var(--color-background-active);
  }
  a.current {
    background-color: var(--color-background-active);
  }
}

.tsd-navigation {
  & > a {
    /* Top-level navigation anchor. */
    margin-block: 16px;
    font-size: 18px;
    background: transparent !important;
    
    &:hover {
      color: var(--color-contrast-text);
    }
  }

  .tsd-small-nested-navigation {
    /* margin-left: 8px; */
  }
}

.tsd-page-navigation {
  border-left: 1px solid var(--color-background-active);
  padding-left: 4px;
  padding-block: 4px;
}

.tsd-widget {
  display: flex;
  align-items: center;
  height: auto;
  width: auto;
  padding: 4px;
  font-size: 14px;
  border-radius: 4px;
  transition: background-color 200ms;
  color: var(--color-text-aside);

  &:hover {
    background-color: var(--color-background-active);
  }
}

#tsd-search-results {
  & > li {
    padding-inline: 6px;
    transition: background-color 200ms;
  }

  a:hover {
    text-decoration: none;
  }
}

.tsd-breadcrumb {
  margin-bottom: 12px;
  li:after {
    content: " â€º ";
  }
  li:last-of-type::after {
    content: "";
  }
}

.tsd-signature,
.tsd-signatures .tsd-signature {
  border: 0;
  border-radius: 8px;
  background: var(--color-background-secondary);
  font-weight: 500;
  padding: 10px 8px;
  line-height: 1.3;
}
`;

/**
 * Fresh theme for TypeDoc.
 *
 * A clean, minimalist and well-designed theme.
 */
export class Fresh extends DefaultTheme {
  constructor(renderer: Renderer) {
    super(renderer);
    renderer.hooks.on("head.end", () => {
      // Insert some extra CSS at the end of the <head> element for this theme.
      return (
        <style type="text/css">
          <JSX.Raw html={styles} />
        </style>
      );
    });

    // Override some of the icons as needed.
    this.icons = {
      ...this.icons,
    };
  }

  override getRenderContext(
    pageEvent: PageEvent<Reflection>
  ): DefaultThemeRenderContext {
    return new FreshRenderContext(this, pageEvent);
  }
}

/**
 * Called by TypeDoc when loading this theme as a plugin.
 */
export function load(app: Application) {
  app.renderer.defineTheme("fresh", Fresh);
}
